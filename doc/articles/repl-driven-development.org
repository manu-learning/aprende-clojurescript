* IN PROGRESS (RDD) REPL Driven Development - Interactive Programming  :repl:
   :PROPERTIES:
   :DATE-CREATED: <2023-11-16 Thu>
   :DATE-UPDATED: <2023-11-16 Thu>
   :BOOK: nil
   :BOOK-CHAPTERS: nil
   :COURSE: nil
   :COURSE-LESSONS: nil
   :END:
** Conceptos Relacionados
- nRepl
- CIDER (de Emacs)
** Motivos para usarlo
- Desarrollo incremental, agregando pequeñas implementaciones
- (fast feedback) tiempo de respuesta rápida para probar código, porque evitamos el loop de _re-compilar + re-ejecutar la aplicación_
- Probamos/Desarrollamos en tiempo de ejecución
** Desarrollar desde la REPL VS desde en un Buffer del IDE conectado al REPL
*** Desde la REPL
- podríamos _perder lo que desarrollado en ella_ (apesar de tener un histórico)
*** Desde un Buffer del IDE conectado al REPL
- más organizado, podemos _guardar un histórico de lo implementado_ en tiempo de ejecución (para luego reutilizar)
- _fácil de copiar lo desarrollado_ y agregarlo al proyecto
** Escenarios dónde aplicarlo
- _Corregir errores_ que sólo aparecen en *tiempo de ejecución* sin re-compilar
- _Probar nuevas bibliotecas_, antes de utilizarlas en el proyecto
- _Verificar el comportamiento de funciones definidas por nosotros_, chequeando si se comportan como esperabamos
- _Probar funciones de Clojure_, para entender como utilizarlas
- Modificar el DOM, agregar/modificar elementos
** Referencias
*** Videoconferencias
1. [[https://www.youtube.com/watch?v=toGEegAzrZA][REPL Driven mobile development (by Nilenso)]]
2. [[https://vimeo.com/223309989#t=1440s][REPL Driven Development (2017, Chicago Clojure, Stuart Halloway)]]
3. [[https://vimeo.com/323297132][A map of the REPL-Driven Development territory (2019, by Eric Normand)]]
4. https://www.youtube.com/watch?v=NDrpclY54E0 (by Practicalli)
5. https://www.youtube.com/watch?v=gIoadGfm5T8 (by Sean Corfield)
6. https://www.youtube.com/watch?v=b6Z3NQVn4lY (by Musa AI-hassy)
*** Referencias Extra-Oficiales
1. https://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html (Clean Coder, Uncle Bob)
2. https://danlebrero.com/2018/11/26/repl-driven-development-immediate-feedback-for-you-backend/
3. https://dev.funnel.io/blog/2021-12-20-test-and-repl-driven-development/
4. https://softwareengineering.stackexchange.com/questions/168285/difference-between-a-repl-and-interactive-shell
5. https://unhandledexception.dev/repl-driven-development-rdd-c786e379a92f
6. https://practical.li/clojure/introduction/repl-workflow/#evaluating-source-code
7. https://www.davidtanzer.net/david%27s%20blog/2014/08/11/repl-driven-development-and-testing-in-clojure.html
8. https://medium.com/codex/test-driven-vs-repl-driven-development-809d3c7a681
*** Repositorios
1. https://github.com/anonimitoraf/skerrick (nodejs)
