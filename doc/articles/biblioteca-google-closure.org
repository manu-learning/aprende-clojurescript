* Biblioteca Google Closure                        :library:google_closure:
   :PROPERTIES:
   :DATE-CREATED: <2023-10-16 Mon>
   :DATE-UPDATED: <2023-10-16 Mon>
   :BOOK: nil
   :BOOK-CHAPTERS: nil
   :COURSE: nil
   :COURSE-LESSONS: nil
   :END:
** Namespaces
  - ~goog.dom~ provee funciones para manipular el DOM (/Ej. createElement, appendChild, ../)
  - ~goog.events~ provee funciones para escuchar y manejar eventos (/Ej. keyup/)

  #+BEGIN_QUOTE
  Para facilitar el uso de los namespaces de la biblioteca Closure de Google
  usamos la función ~(require)~ y una keyword especial ~:as~ con el nombre que queramos llamar al namespace

  ~(require '[goog.dom :as gdom]~
  #+END_QUOTE
** Manipular el DOM
*** Obtener elementos
**** Wrappers de Funciones Nativas de Javascript
***** .querySelector
     - Es una *función nativa de javascript* que expone clojurescript
     - Obteniene el primer elemento del DOM que coincida
     - Usamos ~#~ para capturar por el atributo id de un elemento del DOM
     - usamos ~.~ para capturar por el atributo class de un elemento del DOM
***** .getElementById
     - Es una *función nativa de javascript* que expone clojurescript
     - Obteniene un elemento del DOM que contenga ese valor en su atributo id
     - El namespace ~goog.dom~ tiene ~getElement(id-del-elemento)~ como *función wrapper* que facilita su invocación
**** getElement
    - Obtiene un elemento del DOM como un *objeto javascript*
**** Ejemplos
***** Ejemplo 1 - Obtener elementos con funciones nativas de javascript
      #+BEGIN_SRC clojure
        (:require [goog.dom :as gdom])

        ;; js/document
        ;; - obtenemos el DOM (se lo pasaremos por parámetro al querySelector)
        (def body (.querySelector js/document "#bienvenida"))

        (def field-apodo (.getElementById js/document "field-apodo"))
        (def apodo (.getElementById js/document "apodo"))
      #+END_SRC
***** Ejemplo 2 - Obtener elementos con getElement
   #+BEGIN_SRC clojure
     (:require [goog.dom :as gdom])

     (def nombre (gdom/getElement "nombre"))
   #+END_SRC
*** Crear Elementos + Anidar/Insertar elementos
**** defonce
    - ~defonce~ es propio de clojureScript
    - Asegura que las variables se definen y evalúan una única vez

    #+BEGIN_QUOTE
    Si combinamos ~createElement~ y ~appendChild~ que generamos *Side Effect* (/modifica el DOM en particular appendChild/),
    porque creamos e insertamos elementos en el DOM cada vez que actualicemos el código fuente de nuestra aplicación.

    Entonces definimos las variables con ~defonce~ si lo anterior es un comportamiento no deseado que queremos evitar.
    #+END_QUOTE
**** createElement
      - La firma es de la forma ~createElement(nombre-tag)~
      - Crea y devuelve un elemento con el nombre del *tag* que le pasamos
**** appendChild
    - La firma es de la forma ~appendChild(elemento-padre, elemento-hijo)~
**** Ejemplo
    #+BEGIN_SRC clojure
      (:require [goog.dom :as gdom])

      (def bienvenida (.querySelector js/document "#bienvenida"))
      (defonce titulo (gdom/createElement "h1"))
      (defonce parrafo (gdom/createElement "p"))

      (gdom/appendChild bienvenida titulo)
      (gdom/appendChild bienvenida parrafo)

      ;; suponiendo que queremos agrupar la lógica anterior
      (defn bienvenida-loaded? []
        (do
          (gdom/appendChild body titulo)
          (gdom/appendChild body parrafo)))

      (bienvenida-loaded?)
    #+END_SRC
*** Modificar contenido de Elementos
**** setContext
    - La firma es de la forma ~setTextContent(elemento, texto)~
**** Ejemplo
    #+BEGIN_SRC clojure
      (:require [goog.dom :as gdom])

      (defonce titulo (gdom/createElement "h1"))
      (defonce parrafo (gdom/createElement "p"))

      (gdom/setTextContent titulo "Cuenta de Acceso Premium")
      (gdom/setTextContent parrafo "Estas en la sección premium")
    #+END_SRC
*** Obtener el valor de campos de texto (input)
**** (.-) función de ClojureScript
    - ~.-~ es una función de clojureScript para obtener el *valor asociado a un atributo de un objeto js*
**** Ejemplo
    #+BEGIN_SRC clojure
      (:require [goog.dom :as gdom])

      (def field-nombre (gdom/getElement "field-nombre"))
      (def nombre (gdom/getElement "nombre"))

      (gdom/setTextContent nombre
                           (.-value field-nombre))
    #+END_SRC
*** Eliminar Elemento
**** Ejemplo
     #+BEGIN_SRC clojure
       (:require [goog.dom :as gdom])

       (def bienvenida (.querySelector js/document "#bienvenida"))
       (defonce titulo (gdom/createElement "h1"))
       (defonce parrafo (gdom/createElement "p"))

       ;; appendChild(elemento-padre, elemento-hijo)
       (gdom/appendChild bienvenida titulo)
       (gdom/appendChild bienvenida parrafo)

       (gdom/removeNode bienvenida)
     #+END_SRC
*** Cambiar propiedades de un elemento
**** setProperties
    - La firma es de la forma ~setProperties(elemento, objeto javascript con las propiedades como pares ordenados de la forma propiedad-valor)~
    - El *objeto javascript* que pasamos por 2º parámetro toma la misma forma que una *estructura map de clojure* ~{:a 1 :b 3}~
**** Ejemplo
    #+BEGIN_SRC clojure
      (:require [goog.dom :as gdom])

      (defonce titulo (gdom/createElement "h1"))

      (gdom/setProperties titulo #js {"style" "color:red;"
                                      "class" "big-titulo"})
    #+END_SRC
** add-watch - Observar cambios de estado
*** Conceptos
   - la sintáxis es de la forma ~(add-watch referencia keyword funcion-watch-handler)~
     1) la ~referencia~ es la variable de tipo ~atom~ que tenemos interés en observar los cambios de Estado
     2) la ~keyword~ con la que luego podemos remover la función watch (dejará de observar)
     3) la ~funcion-watch-handler~
        - tiene los cambios de estado (del estado anterior y el nuevo estado)
        - los parámetros de mayor interés suelen ser (3º param) anterior-valor y (4º param) nuevo-valor
*** Ejemplo
   #+BEGIN_SRC clojurescript
     (defonce app-state (atom {:contador 0}))

     (def app-container (gdom/getElement "app"))

     (defn watch-state-contador []
       (add-watch app-state :counter-observer
                  (fn [key atom anterior-valor nuevo-valor]
                    (render-app! nuevo-valor))))
   #+END_SRC
*** Referencias
**** Referencias Oficiales
    1. [[https://cljs.github.io/api/cljs.core/add-watch][add-watch (cljs.github.io)]]
**** Referencias Extraoficiales
    1. [[https://practical.li/clojurescript/figwheel-project/add-a-counter.html][add a counter (practical.li)]]
    2. [[https://www.tutorialspoint.com/clojure/clojure_watchers.htm][Clojure watchers (tutorialspoint.com)]]
** Escuchar y Manejar Eventos
*** Crear Eventos
**** listen
     - La firma es de la forma ~listen(elemento observado, tipo de evento a escuchar/observar, función que invocará cada vez que ocurra el evento escuchado/observado)~
     - La función pasada como 3º parámetro, recibe 1 parámetro (el elemento como un evento)
**** (..) función de clojurescript
      #+BEGIN_QUOTE
      Podemos usar ~..~ que es una función de clojurescript para acceder a un objeto javascript con estructuras anidadas
      por ejemplo ~(.. persona -datos -nombre)~
      #+END_QUOTE
**** Ejemplo
    #+BEGIN_SRC clojure
      (:require [goog.dom :as gdom]
                [goog.events :as gevents])

      (defn actualizar-nombre [evento]
        (gdom/setTextContent nombre
                             (.. evento -currentTarget -value)))

      (gevents/listen field-nombre
                      "keyup"
                      actualizar-nombre)
    #+END_SRC
** Ejemplos Integradores
*** Ejemplo 1 - Validar Campos de Contraseña
   #+BEGIN_SRC clojure
     (:require [goog.dom :as gdom]
               [goog.events :as gevents])

     (defn passwords-fields-coinciden? [password1 password2]
       (= (.-value password1)
          (.-value password2)))

     ;; distintas versiones que fuimos haciendo refactor
     (defn validar-password-v1 [password repassword estado-validacion]
       (if (not= (.-value password) (.-value repassword))
         (gdom/setTextContent estado-validacion "Las contraseñas no coinciden :(")
         (gdom/setTextContent estado-validacion "Las contraseñas coinciden OK :)")))

     (defn validar-password-v2 [password repassword estado-validacion]
       (gdom/setTextContent estado-validacion
                            (if (not= (.-value password) (.-value repassword))
                              "Las contraseñas no coinciden"
                              "Las contraseñas coinciden OK")))

     (defn validar-password-v3 [password repassword estado-validacion]
       (gdom/setTextContent estado-validacion
                            (if (passwords-fields-coinciden? password repassword)
                              "Las contraseñas coinciden :)"
                              "Las contraseñas NO coinciden >:(")))

     ;; macro #
     ;; - para crear una función anónima corta sin nombre y pasar los parámetros que necesita la función que maneja el evento
     (let [password (gdom/getElement "field-password")
           repassword (gdom/getElement "field-repassword")
           estado-validacion (gdom/getElement "estado-validacion-password")]
       (gevents/listen password "keyup"
                       #(validar-password-v3 password repassword estado-validacion))
       (gevents/listen repassword "keyup"
                       #(validar-password-v3 password repassword estado-validacion)))
   #+END_SRC
** Referencias
*** Referencias Oficiales
   1. [[https://developers.google.com/closure/library][Closure Library (developers.google.com)]]
   2. [[https://google.github.io/closure-library/develop/get-started][Getting Started with Closure Library (google.github.io)]]
   3. [[https://google.github.io/closure-library/api/goog.dom.html][Closure library, namespace goog.dom (google.github.io)]]
   4. [[https://google.github.io/closure-library/api/goog.events.html][API Closure library, namespace goog.events (google.github.io)]]
   5. [[https://github.com/google/closure-library/blob/master/closure/goog/dom/dom.js][dom.js (github.com/google/closure-library)]]
