* REPL + Namespaces                                               :cljs:repl:
   :PROPERTIES:
   :DATE-CREATED: <2023-10-16 Mon>
   :DATE-UPDATED: <2023-10-16 Mon>
   :BOOK: nil
   :BOOK-CHAPTERS: nil
   :COURSE: nil
   :COURSE-LESSONS: nil
   :END:
** REPL (Read-Eval-Print Loop)
*** Conceptos
   - Una ~REPL~ es una herramienta que (Lee expr) -> (Evalúa exp) -> (Imprime resultado) -> (se repite el ciclo lee->..)
   - Si a la ~REPL~ le cargamos un namespace, tendremos acceso a todas las funciones/variables definidas en ese namespace

   #+BEGIN_QUOTE
   Una REPL es un ambiente (environment) cuando le asociamos un ~namespace~, por ejemplo
   - Si a la REPL le cargamos el namespace ~clj.user~ estamos en el *ambiente de la app en ejecución* (/en el browser/)
   - Si a la REPL le cargamos el namespace ~proyecto.locura~ estamos en el *ambiente dev* de la aplicación
   #+END_QUOTE
*** Proceso de una REPL
    1. espera una entrada/expresión para leer (read)
    2. evalúa la expresión escrita
    3. luego de evaluada la imprime
    4. y se repite el ciclo lee->evalúa->imprime
*** Proceso de una REPL de ClojureScript
  #+BEGIN_QUOTE
  Con clojurescript, la REPL depende del Browser porque sólo él evaluará las expresiones
  #+END_QUOTE

    1. La REPL espera una expresión
    2. El compilador compila la expresión a código javascript
    3. La REPL envia el código javascript al Browser (/por WebSocket/)
    4. El Navegador evalúa la expresión en javascript y devuelve el resultado al REPL
    5. La REPL recibe el resultado e imprime el resultado
    6. Se repite el ciclo de interacción entre la REPL y el Browser hasta que Browser finalice ó se cierre la conexión
*** TODO Referencias de ClojureScript
**** Referencias Extraoficiales
    1. [[https://lambdaisland.com/guides/clojure-repls/clojurescript-repls][ClojureScript REPLs (lambdaisland.com)]]
*** TODO Referencias de Clojure
**** Referencias Oficiales
    1. [[https://clojure.org/guides/repl/introduction][Programming at the REPL (clojure.org)]]
    2. [[https://clojure.org/guides/repl/launching_a_basic_repl][Launching a Basic REPL (clojure.org)]]
    3. [[https://clojure.org/guides/repl/navigating_namespaces][Navegando entre Namespaces (clojure.org)]]
** Namespaces (Espacios de nombres)
*** Conceptos
   - En clojurescript un ~namespace~ agrupa funciones y datos
*** Relación con la REPL
   - En la ~REPL~ de clojurescript, el namespace cargado por defecto es ~cljs.user~
   - La ~REPL~ devuelve ~nil~ cuando evalúa expresiones que no tienen vinculados algún valor (Ej. al evaluar la función println)
*** El Namespace de la Aplicación en ejecución
   - El namespace ~cljs.user~ representa el namespace de la aplicación en ejecución en el Browser
   - Se crea/carga en la REPL de ClojureScript cuando se establece la conexión con el Browser
*** Cambiar de Namespace
   - Con la función ~in-ns~ podemos cambiar entre namespaces

   #+BEGIN_SRC clojurescript
     ;; en la REPL...

     ;; cambiamos al namespace del proyecto creado
     (in-ns 'learn-cljs.weather)

     ;; cambiamos al default
     (in-ns cljs.user)
   #+END_SRC
