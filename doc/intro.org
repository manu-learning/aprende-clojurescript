#+TITLE: Intro
#+BEGIN_COMMENT
Seguir leyendo..
https://www.learn-clojurescript.com/section-3/lesson-20-capstone-3-contact-book/#summary
#+END_COMMENT
* Namespaces (Espacios de nombres)
** Conceptos
   - En clojurescript un ~namespace~ agrupa funciones y datos
** Relación con la REPL
   - En la ~REPL~ de clojurescript, el namespace cargado por defecto es ~cljs.user~
   - La ~REPL~ devuelve ~nil~ cuando evalúa expresiones que no tienen vinculados algún valor (Ej. al evaluar la función println)
** El Namespace de la Aplicación en ejecución
   - El namespace ~cljs.user~ representa el namespace de la aplicación en ejecución en el Browser
   - Se crea/carga en la REPL de ClojureScript cuando se establece la conexión con el Browser
** Cambiar de Namespace
   - Con la función ~in-ns~ podemos cambiar entre namespaces

   #+BEGIN_SRC clojurescript
     ;; en la REPL...

     ;; cambiamos al namespace del proyecto creado
     (in-ns 'learn-cljs.weather)

     ;; cambiamos al default
     (in-ns cljs.user)
   #+END_SRC
* REPL (Read-Eval-Print Loop)
** Conceptos
   - Una ~REPL~ es una herramienta que (Lee expr) -> (Evalúa exp) -> (Imprime resultado) -> (se repite el ciclo lee->..)
   - Si a la ~REPL~ le cargamos un namespace, tendremos acceso a todas las funciones/variables definidas en ese namespace

   #+BEGIN_QUOTE
   Una REPL es un ambiente (environment) cuando le asociamos un ~namespace~, por ejemplo
   - Si a la REPL le cargamos el namespace ~clj.user~ estamos en el *ambiente de la app en ejecución* (/en el browser/)
   - Si a la REPL le cargamos el namespace ~proyecto.locura~ estamos en el *ambiente dev* de la aplicación
   #+END_QUOTE
** Proceso de una REPL
    1. espera una entrada/expresión para leer (read)
    2. evalúa la expresión escrita
    3. luego de evaluada la imprime
    4. y se repite el ciclo lee->evalúa->imprime
** Proceso de una REPL de ClojureScript
  #+BEGIN_QUOTE
  Con clojurescript, la REPL depende del Browser porque sólo él evaluará las expresiones
  #+END_QUOTE

    1. La REPL espera una expresión
    2. El compilador compila la expresión a código javascript
    3. La REPL envia el código javascript al Browser (/por WebSocket/)
    4. El Navegador evalúa la expresión en javascript y devuelve el resultado al REPL
    5. La REPL recibe el resultado e imprime el resultado
    6. Se repite el ciclo de interacción entre la REPL y el Browser hasta que Browser finalice ó se cierre la conexión
** TODO Referencias de ClojureScript
*** Referencias Extraoficiales
    1. [[https://lambdaisland.com/guides/clojure-repls/clojurescript-repls][ClojureScript REPLs (lambdaisland.com)]]
** TODO Referencias de Clojure
*** Referencias Oficiales
    1. [[https://clojure.org/guides/repl/introduction][Programming at the REPL (clojure.org)]]
    2. [[https://clojure.org/guides/repl/launching_a_basic_repl][Launching a Basic REPL (clojure.org)]]
    3. [[https://clojure.org/guides/repl/navigating_namespaces][Navegando entre Namespaces (clojure.org)]]
* Figwheel
** Conceptos
   - ~figwheel~ establece una conexión Cliente-Servidor entre la *REPL de Clojurescript* (servidor) y el *Browser* (cliente)
   - Cuando escribimos expresiones en la *REPL de Clojurescript* es ~figwheel~ la herramienta que invoca al *Compilador de ClojureScript*

   #+BEGIN_QUOTE
   ~figwheel~ gestiona la interacción Cliente-Servidor entre la REPL de Clojurescript (servidor) y el Browser (Cliente)

   1. ~figwheel~ (server, en la REPL) abre el Browser (/que tiene integrado un figwheel cliente, un script en javascript/)
   2. ~figwheel~ (server, en la REPL) invoca al compilador de clojurescript para que evalúe y compile las expresiones a javascript
   3. ~figwheel~ (server, en la REPL) envía el código javascript al browser (figwheel client)
   4. ~figwheel~ (client, en el Browser) recibe el código javascript, lo evalúa y devuelve el resultado a la REPL (figwheel server)
   5. ~figwheel~ (server, en la REPL) recibe el resultado y lo imprime en la ~REPL de Clojurescript~
   #+END_QUOTE
** Manejo de Errores de Compilación
   #+BEGIN_QUOTE
   Si el código javascript compilado por el compilador de Clojurescript tiene algún error
   1. el ~figwheel~ (client, corre en el Browser) NO ejecuta el código
   2. el ~figwheel~ (client, corre en el Browser) devuelve la excepción al ~figwheel~ (server, corre en la REPL de ClojureScript)

   Es decir no se ejecuta código javascript con errores en ambiente web del Browser,
   esta característica garantiza un estado consistente de la aplicación libre de errores
   #+END_QUOTE
** Referencias
   1. [[https://figwheel.org/][Figwheel-main (figwheel.org)]]
* Pilares para Código Recargable
** Conceptos
   - Obtendremos un código más mantenible y más robusto como cualidades
** Defonce (Def Once)
 - ~defonce~ es similar a ~def~ pero víncula/bindea un valor a una variable sólo una vez
 - por lo general se utiliza para manejar un estado consistente de la aplicación
 - la variable se define una única vez (/NO se redefinirá/)
 - la expresión vinculada/bindeada a la variable se evalúa una única vez (/apesar que el código se modifique y sea recargado/)

 #+BEGIN_QUOTE
 útil si hacemos pequeños cambios
 Ej. validaciones en un formulario y no queremos volver a completarlo todo de nuevo
 #+END_QUOTE
** Funciones idempotentes
   - son funciones que tienen el mismo efecto sin importar las veces que sean llamadas

   #+BEGIN_QUOTE
   una función idempotente sería una que modifica un atributo
   
   una función que NO es idempotente, es aquella que inserta varios elemento-hijo en un elemento-padre,
   sin verificar si éste ya se introdujo (una previa validación si existe el elemento-hijo la haría idempotente)
   #+END_QUOTE
** TODO Separar Lógica de Negocio/Lógica Renderizado
* Referencias
** Libros Online
   1. [[https://www.learn-clojurescript.com][Learn Clojurescript (Andrew Meredith)]]
** Referencias Extraoficiales
   1. https://devz.mx/clojurescript-sin-atajos-fase-1/
* DevTools
  1. [[https://reactjs.org/blog/2015/09/02/new-react-developer-tools.html][New react developer tools (reactjs.org)]]
  2. [[https://practical.li/clojurescript/install/browser-devtools.html][Browser DevTools (practical.li)]]
